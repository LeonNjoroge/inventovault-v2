// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[] @relation("ProductCategories")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  created_at  DateTime @default(now())

  categories         Category[]          @relation("ProductCategories")
  variants           VariantDetail[] // Renamed from `ProductVariant` to `variants` (Prisma convention: plural for arrays)
  inventoryMovements InventoryMovement[]
}

model VariantDetail {
  id         String  @id @default(uuid())
  product_id String?
  size       String
  quantity   Int
  price      Float?

  product Product? @relation(fields: [product_id], references: [id])

  PurchaseItem PurchaseItem[]
  SaleItem     SaleItem[]
}

model Supplier {
  id           String     @id @default(uuid())
  name         String
  contact_info String?
  purchases    Purchase[]
}

model Purchase {
  id          String   @id @default(uuid())
  supplier_id String
  date        DateTime
  invoice_no  String?

  supplier      Supplier       @relation(fields: [supplier_id], references: [id])
  purchaseItems PurchaseItem[]
}

model PurchaseItem {
  id          String  @id @default(uuid())
  purchase_id String
  variant_id  String?
  quantity    Int
  cost_price  Decimal

  purchase      Purchase       @relation(fields: [purchase_id], references: [id])
  variantDetail VariantDetail? @relation(fields: [variant_id], references: [id])

  InventoryMovement InventoryMovement?
}

model Sale {
  id             String     @id @default(uuid())
  date           DateTime
  total_amount   Decimal
  payment_method String
  customer_id    String
  saleItems      SaleItem[]
}

model SaleItem {
  id                String  @id @default(uuid())
  sale_id           String
  variant_detail_id String
  quantity          Int
  sale_price        Decimal

  sale          Sale          @relation(fields: [sale_id], references: [id])
  variantDetail VariantDetail @relation(fields: [variant_detail_id], references: [id])

  InventoryMovement InventoryMovement?
}

model InventoryMovement {
  id               String               @id @default(uuid())
  product_id       String
  purchase_item_id String?              @unique
  sale_item_id     String?              @unique
  change_type      InventoryChangeType?
  quantity_change  Int
  comment          String?
  created_at       DateTime             @default(now())

  product      Product       @relation(fields: [product_id], references: [id])
  purchaseItem PurchaseItem? @relation(fields: [purchase_item_id], references: [id])
  saleItem     SaleItem?     @relation(fields: [sale_item_id], references: [id])
}

enum InventoryChangeType {
  PURCHASE
  SALE
  ADJUSTMENT
  RETURN
}
